setwd("~/QuantumPhaseEstimation/man")
library(QuantumPhaseEstimation)
library(QuantumPhaseEstimation)
library("QuantumPhaseEstimation", lib.loc="~/anaconda3/envs/Rstudio/lib/R/library")
rm(list=ls())
library(parallel)
#numCores <- detectCores()
numCores <- 6
#----------------------------
#Parametro desconocido
#----------------------------
theta <- pi
xp<-seq(0,2*pi, by=1/10)
#-------------------------------
#Parameters of Generator
#-------------------------------
n1 <- 1/sqrt(3)
n2 <- 1/sqrt(3)
n3 <- 1/sqrt(3)
n <- c(n1,n2,n3)
a1 <- (3*sqrt(5)+sqrt(3))/12
a2 <- -(3*sqrt(5)-sqrt(3))/12
a3 <- 1/sqrt(3)
a <- c(a1,a2,a3)
#---------------------------------
#Likelihood
#---------------------------------
likeMS1 <- pracma::Real(P_covariante(a,n,t,x))
vflkMS <- Vectorize(likeMS1)
llikeMS <- logfunc2(vflkMS)
#---------------------------------
#Likelihood
#---------------------------------
likeMS1 <- pracma::Real(P_covariante(a,n,t,x))
#---------------------------------
#Likelihood
#---------------------------------
likeMS1 <- function(x,t) pracma::Real(P_covariante(a,n,t,x))
vflkMS <- Vectorize(likeMS1)
llikeMS <- logfunc2(vflkMS)
llikeMS(2,3)
plot(xp, likeMS1(xp,3))
plot(xp, likeMS1(xp,2))
plot(xp, likeMS1(xp,1))
vfpbMS <- function(x) { pracma::Real(P_covariante(a,n,theta,x))}
arb_sampling(vfpbMS,3,0,2*pi)
MLEest <- function(nm) {
#Generate the sample
sampMS <- arb_sampling(vfpbMS,nm,0,2*pi)
sampMS <- sampMS[!is.na(sampMS)]
while (length(sampMS)<nm) {
sampMS <- append(sampMS, rsamp(vfpbMS, 1), after = length(sampMS))
sampMS <- sampMS[!is.na(sampMS)]}
create_loglikeMS <- function(i){
loglikes <- function(t){llikeMS(x=sampMS[i], t=t)   }
}
loglikesMS <- lapply(1:length(sampMS), create_loglikeMS)
PlikelihoodMS <- function(t) sumfctb2(loglikesMS, length(loglikesMS))(t)
#if(nm==1)  {mleM <- sampMS[nm]} else {
mleM <- choosemax(1e-5, maxims(Vectorize(PlikelihoodMS),40,0,2*pi), Vectorize(PlikelihoodMS))
#}
#plot(xp, Vectorize(PlikelihoodMS)(xp), type = "l")
return(mleM)
}
system.time({ print(MLEest(300))})
MLEest <- function(nm) {
#Generate the sample
sampMS <- arb_sampling(vfpbMS,nm,0,2*pi)
sampMS <- sampMS[!is.na(sampMS)]
while (length(sampMS)<nm) {
sampMS <- append(sampMS, rsamp(vfpbMS, 1), after = length(sampMS))
sampMS <- sampMS[!is.na(sampMS)]}
create_loglikeMS <- function(i){
loglikes <- function(t){llikeMS(x=sampMS[i], t=t)   }
}
loglikesMS <- lapply(1:length(sampMS), create_loglikeMS)
PlikelihoodMS <- function(t) sumfctb2(loglikesMS, length(loglikesMS))(t)
#if(nm==1)  {mleM <- sampMS[nm]} else {
mleM <- choosemax(8, maxims(Vectorize(PlikelihoodMS),10,0,2*pi), Vectorize(PlikelihoodMS))
#}
#plot(xp, Vectorize(PlikelihoodMS)(xp), type = "l")
return(mleM)
}
system.time({ print(MLEest(300))})
system.time({ print(MLEest(30))})
system.time({ print(MLEest(10))})
system.time({ print(MLEest(100))})
MLEest <- function(nm) {
#Generate the sample
sampMS <- arb_sampling(vfpbMS,nm,0,2*pi)
sampMS <- sampMS[!is.na(sampMS)]
while (length(sampMS)<nm) {
sampMS <- append(sampMS, rsamp(vfpbMS, 1), after = length(sampMS))
sampMS <- sampMS[!is.na(sampMS)]}
create_loglikeMS <- function(i){
loglikes <- function(t){llikeMS(x=sampMS[i], t=t)   }
}
loglikesMS <- lapply(1:length(sampMS), create_loglikeMS)
PlikelihoodMS <- function(t) sumfctb2(loglikesMS, length(loglikesMS))(t)
#if(nm==1)  {mleM <- sampMS[nm]} else {
mleM <- choosemax(8, maxims(Vectorize(PlikelihoodMS),8,0,2*pi), Vectorize(PlikelihoodMS))
#}
#plot(xp, Vectorize(PlikelihoodMS)(xp), type = "l")
return(mleM)
}
system.time({ print(MLEest(100))})
system.time({ print(MLEest(300))})
