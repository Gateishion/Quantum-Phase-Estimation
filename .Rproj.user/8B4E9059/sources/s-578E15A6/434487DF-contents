rm(list=ls())

library(parallel)
#numCores <- detectCores()
numCores <- 6

#----------------------------
#Parametro desconocido
#----------------------------
theta <- pi
xp<-seq(0,2*pi, by=1/10)


#-------------------------------
#Parameters of Generator
#-------------------------------
n1 <- 1/sqrt(3)
n2 <- 1/sqrt(3)
n3 <- 1/sqrt(3)
n <- c(n1,n2,n3)


#----------------------------------
#Parameters of state
#----------------------------------
#a1 <- 1/sqrt(2)
#a2 <- 0
#a3 <- -1/sqrt(2)

a1 <- (3*sqrt(5)+sqrt(3))/12
a2 <- -(3*sqrt(5)-sqrt(3))/12
a3 <- 1/sqrt(3)
a <- c(a1,a2,a3)

#---------------------------------
#Likelihood
#---------------------------------

likeMS1 <- function(x,t) pracma::Real(P_covariante(a,n,t,x))
vflkMS <- Vectorize(likeMS1)
llikeMS <- logfunc2(vflkMS)

vfpbMS <- function(x) { pracma::Real(P_covariante(a,n,theta,x))}


MLEest <- function(nm) {

  #Generate the sample
  sampMS <- arb_sampling(vfpbMS,nm,0,2*pi)
  sampMS <- sampMS[!is.na(sampMS)]
  while (length(sampMS)<nm) {
    sampMS <- append(sampMS, arb_sampling(vfpbMS, 1,0,2*pi), after = length(sampMS))
    sampMS <- sampMS[!is.na(sampMS)]}

  create_loglikeMS <- function(i){
    loglikes <- function(t){llikeMS(x=sampMS[i], t=t)   }
  }
  loglikesMS <- lapply(1:length(sampMS), create_loglikeMS)
  PlikelihoodMS <- function(t) sumfctb2(loglikesMS, length(loglikesMS))(t)

  #if(nm==1)  {mleM <- sampMS[nm]} else {
  mleM <- choosemax(8, maxims(Vectorize(PlikelihoodMS),8,0,2*pi), Vectorize(PlikelihoodMS))
  #}
  #plot(xp, Vectorize(PlikelihoodMS)(xp), type = "l")
  return(mleM)
}

system.time({ print(MLEest(300))})

#----------------------------------
#Bootstrap_to_Variance
#----------------------------------

nummles <- 50

estimations <- NULL
VariancesJI <- function(nm){
  X <- rep(nm, nummles)
  #estimsJI <- sapply(X, MLEestCorrection)
  estimsJI <- unlist(mclapply(X, MLEest, mc.cores = (numCores-2)))
  hist(estimsJI, breaks = 25, probability = T)
  #lines(density(estimsJI), col="red")
  v <- c(var(estimsJI)*(nm),(mean(cos(estimsJI -theta))^(-2)-1)*(nm), (CircStats::circ.disp(estimsJI)$rbar^(-2)-1)*(nm))
  #estimations <<- cbind(estimsJI)
  #write.row(estimations,file="estimsMstarOp.csv",append=T)
  write.table(estimsJI,file="estims_Mstar.csv",append=TRUE)
  return(v)
}


#VariancesJI(8)
#vm <- c(1,8,16,32,64,96,128)
vm <- c(156,300)
VVar <- Vectorize(VariancesJI)
system.time({ VecVariancesJI <- VVar(vm) })
VecVariancesJI


sprintf("%.16f", VecVariancesJIT)

VecVariancesJIT <- cbind(vm, VecVariancesJI[3,])
VecVariancesJIT
write.table(VecVariancesJIT, file = "Mstar_NoptIC.csv", append = TRUE)



